name: Share Data
run-name: ${{ github.actor }} is learning sharing data between JOBS

on: 
  push:
    branches:
      - shared_data

jobs:
  first_job:
    runs-on: ubuntu-latest

    outputs: 
      my_variable: ${{ steps.set_variable_step.outputs.my_variable }}

    steps:
      - name: The GITHUB_OUTPUT file 1
        run: echo $GITHUB_OUTPUT

      - name: Sharing variable in GITHUB_OUTPUT
        id: set_variable_step
        run: echo "my_variable=Hello GitHub Actions" >> $GITHUB_OUTPUT

      - name: Accessing the previous variable with step context outputs, steps.ID_step
        run: |
          echo "My variable is ${{ steps.set_variable_step.outputs.my_variable }}"
          echo "El resultado del anterior step es ${{ steps.set_variable_step.conclusion}}"

      - name: Check outputs
        run: echo "${{ toJSON(steps.set_variable_step.outputs) }}"

  second_job:
    needs: first_job
    runs-on: ubuntu-latest

    env: 
      FIRST_JOB_VARIABLE: ${{ needs.first_job.outputs.my_variable }}

    steps:
      - name: The first_job outputs
        run: echo "The first job output object to JSON is ${{ toJSON(needs.first_job.outputs)}}"

      - name: The variable from the first job is... $FIRST_JOB_VARIABLE from env
        run: echo "$FIRST_JOB_VARIABLE"

      - name: Usually, the variable is stored in the environment. But you can also access it with the needs context directly
        run: echo "${{ needs.first_job.outputs.my_variable }}"